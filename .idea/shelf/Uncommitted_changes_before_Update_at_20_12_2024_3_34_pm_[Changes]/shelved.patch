Index: src/main/java/org/example/Instructor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n//import jakarta.persistence.Entity;\r\n//import jakarta.persistence.EnumType;\r\n//import jakarta.persistence.Enumerated;\r\n//import jakarta.persistence.GeneratedValue;\r\n//import jakarta.persistence.GenerationType;\r\n//import jakarta.persistence.Column;\r\n//\r\n//\r\n////import org.springframework.data.annotation.Id;\r\n//import org.springframework.stereotype.Service;\r\nimport java.util.List;\r\n\r\n//@Entity\r\npublic class Instructor {\r\n\r\n//    @jakarta.persistence.Id\r\n\r\n//    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n//    @Column(nullable = false, unique = true)\r\n    String email;\r\n\r\n\r\n//    @Column(nullable = false)\r\n    String password;\r\n\r\n//    @Enumerated(EnumType.STRING)\r\n    private InstructorStatus status;\r\n\r\n    public Instructor(String email, String password) {\r\n        this.email = email;\r\n        this.password = password;\r\n    }\r\n\r\n    public Instructor() {\r\n\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    // Getters and Setters\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/Instructor.java b/src/main/java/org/example/Instructor.java
--- a/src/main/java/org/example/Instructor.java	(revision 21a7f33596e1ccb87628045f040b10b023b15eb8)
+++ b/src/main/java/org/example/Instructor.java	(date 1734700711950)
@@ -1,51 +1,29 @@
-package org.example;
-//import jakarta.persistence.Entity;
-//import jakarta.persistence.EnumType;
-//import jakarta.persistence.Enumerated;
-//import jakarta.persistence.GeneratedValue;
-//import jakarta.persistence.GenerationType;
-//import jakarta.persistence.Column;
-//
-//
-////import org.springframework.data.annotation.Id;
-//import org.springframework.stereotype.Service;
-import java.util.List;
-
-//@Entity
-public class Instructor {
-
-//    @jakarta.persistence.Id
-
-//    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    private Long id;
-
-//    @Column(nullable = false, unique = true)
-    String email;
-
-
-//    @Column(nullable = false)
-    String password;
-
-//    @Enumerated(EnumType.STRING)
-    private InstructorStatus status;
-
-    public Instructor(String email, String password) {
-        this.email = email;
-        this.password = password;
-    }
-
-    public Instructor() {
-
-    }
-
-    public void setId(Long id) {
-        this.id = id;
-    }
-
-    public Long getId() {
-        return id;
-    }
-
-    // Getters and Setters
-}
-
+////package org.example;
+////import org.springframework.stereotype.Service;
+////import java.util.List;
+////
+////import org.springframework.*;
+////@Entity
+//public class Instructor {
+////
+////    @Id
+////    @GeneratedValue(strategy = GenerationType.IDENTITY)
+////    private Long id;
+////
+////    @Column(nullable = false, unique = true)
+////    private String email;
+////
+////    @Column(nullable = false)
+////    private String name;
+////
+////    @Enumerated(EnumType.STRING)
+////    private InstructorStatus status;
+////
+////    // Getters and Setters
+////}
+////public enum InstructorStatus {
+////    PENDING,
+////    APPROVED,
+////    REJECTED
+////}
+////
Index: src/test/java/Features/Instructor/ProgramManagment.feature
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Feature: Program Management\r\n\r\n  Scenario: Create a fitness program\r\n    Given the instructor is logged in\r\n    When the following details are provided\r\n      |Program title|Get Fit & Moving Challenge|\r\n      |Duration|30 days                        |\r\n      |Difficulty level|Beginners              |\r\n      |Goals           |Weight Loss, Full Body |\r\n      |Content         |https://youtu.be/f3zOrYCwquE |\r\n      |Price|29.99 $                                |\r\n      |Schedual time|[5-7]pm                        |\r\n\r\n    Then the program is created with the specified details \"Get Fit & Moving Challenge\"\r\n\r\n  Scenario: Update a fitness program Successfully\r\n    Given the instructor is logged in\r\n    When a fitness program with the title \"Get Fit & Moving Challenge\" exists\r\n    And the instructor updates the program with the following details\r\n      |Program title|Get Fit & Moving Challenge|\r\n      |Duration|3 months                        |\r\n      |Difficulty level|Beginners              |\r\n      |Goals           |Weight Loss, Full Body |\r\n      |Content         |https://youtu.be/f3zOrYCwquE |\r\n      |Price|29.99 $                                |\r\n      |Schedual time|[5-7]pm                        |\r\n    Then the program is updated successfully with the new details\r\n\r\n\r\n  Scenario: Update a non-existing fitness program\r\n    Given the instructor is logged in\r\n    When a fitness program with the title \"Get Fit\" doesn't exist\r\n    And the instructor updates the program with the following details\r\n      |Program title|Get Fit & Moving Challenge|\r\n      |Duration|3 months                        |\r\n      |Difficulty level|Beginners              |\r\n      |Goals           |Weight Loss, Full Body |\r\n      |Content         |https://youtu.be/f3zOrYCwquE |\r\n      |Price|29.99 $                                 |\r\n      |Schedual time|[5-7]pm                        |\r\n    Then the system displays an error message indicating that the program does not exist\r\n\r\n  Scenario Outline: Delete a fitness program (Success and Failure)\r\n    Given the instructor is logged in\r\n    When the instructor attempts to delete the program with title \"<program_title>\"\r\n    Then the program deletion result is:\r\n      | Status       | Message                                    |\r\n      | <expected_status> | <expected_message>                         |\r\n\r\n    Examples:\r\n      | program_title             | expected_status | expected_message                                     |\r\n      | Get Fit & Moving Challenge | Success           | Program deleted successfully                        |\r\n      | Non-Existing Program      | Failure           | Program with title \"<program_title>\" not found. |\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/Features/Instructor/ProgramManagment.feature b/src/test/java/Features/Instructor/ProgramManagment.feature
--- a/src/test/java/Features/Instructor/ProgramManagment.feature	(revision 21a7f33596e1ccb87628045f040b10b023b15eb8)
+++ b/src/test/java/Features/Instructor/ProgramManagment.feature	(date 1734700703711)
@@ -9,7 +9,7 @@
       |Goals           |Weight Loss, Full Body |
       |Content         |https://youtu.be/f3zOrYCwquE |
       |Price|29.99 $                                |
-      |Schedual time|[5-7]pm                        |
+    #  |Schedual time|[5-7]pm                        |
 
     Then the program is created with the specified details "Get Fit & Moving Challenge"
 
@@ -23,7 +23,7 @@
       |Goals           |Weight Loss, Full Body |
       |Content         |https://youtu.be/f3zOrYCwquE |
       |Price|29.99 $                                |
-      |Schedual time|[5-7]pm                        |
+      #|Schedual time|[5-7]pm                        |
     Then the program is updated successfully with the new details
 
 
@@ -37,7 +37,7 @@
       |Goals           |Weight Loss, Full Body |
       |Content         |https://youtu.be/f3zOrYCwquE |
       |Price|29.99 $                                 |
-      |Schedual time|[5-7]pm                        |
+     # |Schedual time|[5-7]pm                        |
     Then the system displays an error message indicating that the program does not exist
 
   Scenario Outline: Delete a fitness program (Success and Failure)
Index: src/test/java/Features/Instructor/clientInteraction.feature
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/Features/Instructor/clientInteraction.feature b/src/test/java/Features/Instructor/clientInteraction.feature
--- a/src/test/java/Features/Instructor/clientInteraction.feature	(revision 21a7f33596e1ccb87628045f040b10b023b15eb8)
+++ b/src/test/java/Features/Instructor/clientInteraction.feature	(date 1734700703696)
@@ -1,0 +1,18 @@
+Feature: client Interaction
+  Scenario: Sending a Personalized Message
+    Given an instructor is logged in
+    And the instructor has an active program with enrolled clients
+    When the instructor selects a client and sends a personalized message
+    Then the client should receive the personalized message
+
+#  Scenario: Posting a Forum Message
+#    Given an instructor is logged in
+#    And the instructor has an active program with a discussion forum
+#    When the instructor posts a message to the forum
+#    Then all enrolled clients should see the message on the forum
+#
+#  Scenario: Providing Feedback to a Client
+#    Given an instructor is logged in
+#    And the instructor has access to a client's progress report
+#    When the instructor provides feedback to the client
+#    Then the client should receive the feedback
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>org.example</groupId>\r\n    <artifactId>Fitness</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <maven.compiler.source>17</maven.compiler.source>\r\n        <maven.compiler.target>17</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>io.cucumber</groupId>\r\n            <artifactId>cucumber-java</artifactId>\r\n            <version>7.20.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.cucumber</groupId>\r\n            <artifactId>cucumber-picocontainer</artifactId>\r\n            <version>7.20.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.cucumber</groupId>\r\n            <artifactId>cucumber-core</artifactId>\r\n            <version>7.20.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.cucumber</groupId>\r\n            <artifactId>cucumber-junit</artifactId>\r\n            <version>7.20.1</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <version>4.13.1</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.mockito</groupId>\r\n            <artifactId>mockito-core</artifactId>\r\n            <version>5.14.2</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n\r\n\r\n    </dependencies>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 21a7f33596e1ccb87628045f040b10b023b15eb8)
+++ b/pom.xml	(date 1734700711954)
@@ -49,8 +49,23 @@
             <version>5.14.2</version>
             <scope>test</scope>
         </dependency>
-
-
+<!--        <dependency>-->
+<!--            <groupId>org.springframework</groupId>-->
+<!--            <artifactId>spring-context</artifactId>-->
+<!--            <version>6.2.1</version>-->
+<!--        </dependency>-->
+<!--        <dependency>-->
+<!--            <groupId>io.cucumber</groupId>-->
+<!--            <artifactId>cucumber-spring</artifactId>-->
+<!--            <version>7.20.1</version>-->
+<!--            <scope>test</scope>-->
+<!--        </dependency>-->
+<!--        <dependency>-->
+<!--            <groupId>org.springframework.boot</groupId>-->
+<!--            <artifactId>spring-boot-starter-test</artifactId>-->
+<!--            <version>3.4.0</version>-->
+<!--            <scope>test</scope>-->
+<!--        </dependency>-->
 
     </dependencies>
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"96ebe654-e637-4521-b05f-2ed7fce7b6f8\" name=\"Changes\" comment=\"Admin testcode\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/Client.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/pages/cucumber.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/pages/cucumber.html\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/Admin.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/Admin.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/AdminService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/AdminService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/test/java/org/example/AcceptanceTest/AdminUserManagementTest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/java/org/example/AcceptanceTest/AdminUserManagementTest.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Ghayda-Saify&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\r\n  \"selectedUrlAndAccountId\": {\r\n    \"url\": \"https://github.com/TalaAlhendi/SW-Project.git\",\r\n    \"accountId\": \"83da6505-7ab8-4b97-b7f8-45c77f0031ba\"\r\n  },\r\n  \"recentNewPullRequestHead\": {\r\n    \"server\": {\r\n      \"useHttp\": false,\r\n      \"host\": \"github.com\",\r\n      \"port\": null,\r\n      \"suffix\": null\r\n    },\r\n    \"owner\": \"TalaAlhendi\",\r\n    \"repository\": \"SW-Project\"\r\n  }\r\n}]]></component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2qSJUgKlFXO8XHQzPIM5jPamcbX\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;JUnit.acceptanceTest.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"acceptanceTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Fitness\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"org.example.AcceptanceTest.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"org.example.AcceptanceTest\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.example.AcceptanceTest.acceptanceTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.acceptanceTest\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23339.11\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23339.11\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task id=\"LOCAL-00001\" summary=\"Admin testcode\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734620442002</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734620442002</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Admin test and production code\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734644545713</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734644545713</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"edit on programManagementStepTest\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734646611195</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734646611195</updated>\r\n    </task>\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"96ebe654-e637-4521-b05f-2ed7fce7b6f8\" name=\"Changes\" comment=\"edit on programManagementStepTest\" />\r\n      <created>1734650063351</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1734650063351</updated>\r\n      <workItem from=\"1734650065119\" duration=\"3975000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"add depend. + finish a feature\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734688544556</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734688544556</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Admin testcode\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1734689341616</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1734689341616</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"6\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Admin test and production code\" />\r\n    <MESSAGE value=\"edit on programManagementStepTest\" />\r\n    <MESSAGE value=\"add depend. + finish a feature\" />\r\n    <MESSAGE value=\"Admin testcode\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Admin testcode\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 21a7f33596e1ccb87628045f040b10b023b15eb8)
+++ b/.idea/workspace.xml	(date 1734701521093)
@@ -5,12 +5,17 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="96ebe654-e637-4521-b05f-2ed7fce7b6f8" name="Changes" comment="Admin testcode">
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/Client.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/Instruct.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/test/java/org/example/AcceptanceTest/clientInteractionStepTest.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/pages/cucumber.html" beforeDir="false" afterPath="$PROJECT_DIR$/pages/cucumber.html" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Admin.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Admin.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/AdminService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/AdminService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/test/java/org/example/AcceptanceTest/AdminUserManagementTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/org/example/AcceptanceTest/AdminUserManagementTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Client.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Client.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Instructor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Instructor.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Program.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Program.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/Features/Instructor/ProgramManagment.feature" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/Features/Instructor/ProgramManagment.feature" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/Features/Instructor/clientInteraction.feature" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/Features/Instructor/clientInteraction.feature" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/org/example/AcceptanceTest/acceptanceTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/org/example/AcceptanceTest/acceptanceTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/org/example/AcceptanceTest/programManagementStepTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/org/example/AcceptanceTest/programManagementStepTest.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -33,27 +38,29 @@
     &quot;assignee&quot;: &quot;Ghayda-Saify&quot;
   }
 }</component>
-  <component name="GithubPullRequestsUISettings"><![CDATA[{
-  "selectedUrlAndAccountId": {
-    "url": "https://github.com/TalaAlhendi/SW-Project.git",
-    "accountId": "83da6505-7ab8-4b97-b7f8-45c77f0031ba"
-  },
-  "recentNewPullRequestHead": {
-    "server": {
-      "useHttp": false,
-      "host": "github.com",
-      "port": null,
-      "suffix": null
-    },
-    "owner": "TalaAlhendi",
-    "repository": "SW-Project"
-  }
-}]]></component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/TalaAlhendi/SW-Project.git&quot;,
+    &quot;accountId&quot;: &quot;83da6505-7ab8-4b97-b7f8-45c77f0031ba&quot;
+  },
+  &quot;recentNewPullRequestHead&quot;: {
+    &quot;server&quot;: {
+      &quot;useHttp&quot;: false,
+      &quot;host&quot;: &quot;github.com&quot;,
+      &quot;port&quot;: null,
+      &quot;suffix&quot;: null
+    },
+    &quot;owner&quot;: &quot;TalaAlhendi&quot;,
+    &quot;repository&quot;: &quot;SW-Project&quot;
+  }
+}</component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 5
 }</component>
   <component name="ProjectId" id="2qSJUgKlFXO8XHQzPIM5jPamcbX" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
Index: src/test/java/org/example/AcceptanceTest/acceptanceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.AcceptanceTest;\r\n\r\nimport io.cucumber.junit.Cucumber;\r\nimport io.cucumber.junit.CucumberOptions;\r\nimport org.junit.runner.RunWith;\r\n\r\n@RunWith(Cucumber.class)\r\n@CucumberOptions(\r\n        features = \"src/test/java/Features\",\r\n        plugin = {\"html:pages/cucumber.html\"},\r\n//    monochrome = true,\r\n    snippets = CucumberOptions.SnippetType.CAMELCASE,\r\n    glue = {\"org.example.AcceptanceTest\"}\r\n)\r\n\r\n\r\npublic class acceptanceTest {\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/example/AcceptanceTest/acceptanceTest.java b/src/test/java/org/example/AcceptanceTest/acceptanceTest.java
--- a/src/test/java/org/example/AcceptanceTest/acceptanceTest.java	(revision 21a7f33596e1ccb87628045f040b10b023b15eb8)
+++ b/src/test/java/org/example/AcceptanceTest/acceptanceTest.java	(date 1734700714509)
@@ -2,10 +2,13 @@
 
 import io.cucumber.junit.Cucumber;
 import io.cucumber.junit.CucumberOptions;
+//import io.cucumber.spring.SpringFactory;
 import org.junit.runner.RunWith;
 
 @RunWith(Cucumber.class)
 @CucumberOptions(
+        objectFactory = io.cucumber.picocontainer.PicoFactory.class,
+//        objectFactory= SpringFactory.class ,
         features = "src/test/java/Features",
         plugin = {"html:pages/cucumber.html"},
 //    monochrome = true,
Index: src/main/java/org/example/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\npublic class Client {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/Client.java b/src/main/java/org/example/Client.java
--- a/src/main/java/org/example/Client.java	(revision 21a7f33596e1ccb87628045f040b10b023b15eb8)
+++ b/src/main/java/org/example/Client.java	(date 1734701258459)
@@ -1,4 +1,22 @@
 package org.example;
 
 public class Client {
+    String name;
+    String email;
+
+
+    public Client(String name, String email) {
+    }
+
+    public boolean getName() {
+    }
+
+    public boolean hasReceivedMessage(String message) {
+    }
+
+    public void setMessage(String message) {
+    }
+
+    public void receiveFeedback(String feedback) {
+    }
 }
Index: src/main/java/org/example/Instruct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/Instruct.java b/src/main/java/org/example/Instruct.java
new file mode 100644
--- /dev/null	(date 1734700703715)
+++ b/src/main/java/org/example/Instruct.java	(date 1734700703715)
@@ -0,0 +1,43 @@
+package org.example;
+
+public class Instruct {
+    String name;
+    String email;
+    boolean LoggedIn;
+    Program program;
+
+    public Instruct(String name, String mail) {
+
+        this.name = name;
+        this.email = mail;
+        program = new Program();
+
+
+    }
+
+    public void setLoggedIn(boolean b) {
+        LoggedIn = true;
+
+    }
+
+    public void setProgram(Program program) {
+        this.program = program;
+    }
+    public String getProgramTitle()
+    {
+        return program.getTitle();
+    }
+
+    public void sendMessageToClient(Client client, String message) {
+        client.setMessage(message);
+    }
+
+    public void postForumMessage(Program program, String title, String content) {
+        program.addForumMessage(title,content);
+    }
+
+    public void provideFeedbackToClient(Client client,String feedback)
+    {
+        client.receiveFeedback(feedback);
+    }
+}
Index: src/test/java/org/example/AcceptanceTest/programManagementStepTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.AcceptanceTest;\r\n\r\nimport io.cucumber.datatable.DataTable;\r\nimport io.cucumber.java.Before;\r\nimport io.cucumber.java.en.Given;\r\nimport io.cucumber.java.en.Then;\r\nimport io.cucumber.java.en.When;\r\nimport org.example.AdminService;\r\nimport org.example.Main;\r\nimport org.example.Program;\r\nimport org.example.ProgramService;\r\nimport org.junit.runner.RunWith;\r\nimport org.mockito.Mockito;\r\nimport org.mockito.junit.MockitoJUnitRunner;\r\n//import org.springframework.beans.factory.annotation.Autowired;\r\n//import org.springframework.boot.test.context.SpringBootTest;\r\n//import org.springframework.test.context.ContextConfiguration;\r\n//import org.springframework.test.context.bean.override.mockito.MockitoBean;\r\n//import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport static org.junit.Assert.*;\r\n//import static org.assertj.core.api.Assertions.assertThat;\r\n@RunWith(MockitoJUnitRunner.class) // For JUnit 4\r\n//@SpringJUnitConfig\r\n//@SpringBootTest\r\n//@ContextConfiguration(classes = { Program.class,ProgramService.class})\r\npublic class programManagementStepTest {\r\n//    private List<Program> programList;\r\n    private Map<String, String> programDetails;\r\n    private String title;\r\n    private Program programToUpdate;\r\n    private boolean InstructorLoggedIn;\r\n\r\n    private ArrayList<Program> programList;\r\n//    @Autowired\r\n    private ProgramService programService;\r\n    Main app;\r\n//    @Before\r\n//    public void setup() {\r\n//        // Initialize the ProgramService and the program list\r\n//        programService = new ProgramService();\r\n//        programList = new ArrayList<>();\r\n//\r\n//        // Add mock data to the programService and programList\r\n//        List<Program> testPrograms = new ArrayList<>();\r\n//        testPrograms.add(new Program(\"Get Fit & Moving Challenge\", \"30 days\", \"Beginners\", \"Weight Loss, Full Body\", \"https://youtu.be/f3zOrYCwquE\", \"29.99 $\"));\r\n//        testPrograms.forEach(program -> {\r\n//            programService.addProgram(program);\r\n//            programList.add(program);\r\n//        });\r\n//\r\n//        System.out.println(\"Mock data added to ProgramService and programList.\");\r\n//    }\r\n\r\n    public programManagementStepTest() {\r\n        app = new Main();\r\n        this.programService = Mockito.mock(ProgramService.class);\r\n        programList = new ArrayList<Program>();\r\n    }\r\n\r\n    @Given(\"the instructor is logged in\")\r\n    public void theInstructorIsLoggedIn() {\r\n        InstructorLoggedIn = true;\r\n        System.out.println(\"the first Scenario\\n\");\r\n    }\r\n\r\n    @When(\"the following details are provided\")\r\n    public void theFollowingDetailsAreProvided(io.cucumber.datatable.DataTable dataTable) {\r\n        programDetails = dataTable.asMap(String.class, String.class);\r\n//        title = programDetails.get(\"Program title\");\r\n//        System.out.println(title);\r\n        if (InstructorLoggedIn) {\r\n            Program program = new Program(\r\n                    programDetails.get(\"Program title\"),\r\n                    programDetails.get(\"Duration\"),\r\n                    programDetails.get(\"Difficulty level\"),\r\n                    programDetails.get(\"Goals\"),\r\n                    programDetails.get(\"Content\"),\r\n                    programDetails.get(\"Price\")\r\n            );\r\n            programList.add(program); // Add the created program to the list\r\n        } else {\r\n            System.out.println(\"Instructor is not logged in\");\r\n        }\r\n//        programService.displayAllPrograms();\r\n    }\r\n\r\n    @Then(\"the program is created with the specified details {string}\")\r\n    public void theProgramIsCreatedWithTheSpecifiedDetails(String programTitle) {\r\n        Program program = null;\r\n        for (Program p : programList) {\r\n            if (p.getTitle() != null && p.getTitle().equals(programTitle)) {\r\n                program = p;\r\n                break;\r\n            }\r\n        }\r\n        assertNotNull(\"The program with title ' \" + programTitle + \" ' wasn't found!\", program);\r\n    }\r\n\r\n    @When(\"a fitness program with the title {string} exists\")\r\n    public void aFitnessProgramWithTheTitleExists(String programTitle) {\r\n        System.out.println(\"the 2nd Scenario\\n\");\r\n\r\n        // Find the program in the list based on the title passed from Gherkin scenario\r\n        programToUpdate = programList.stream()\r\n                .filter(p -> p.getTitle().equals(programTitle))  // Match the title\r\n                .findFirst()   // Get the first program that matches\r\n                .orElse(null); // If no match, programToUpdate will be null\r\n\r\n        // Assert that the program is found\r\n        assertNotNull(\"Program to update was not found in programList!\", programToUpdate);\r\n        if (programToUpdate != null) {\r\n            title = programToUpdate.getTitle();  // Store the title of the program\r\n        }\r\n//        programService.displayAllPrograms();\r\n//        boolean exists = programService.searchIfExists(programList, programTitle);\r\n////        System.out.println(programToUpdate);\r\n//       // assertNotNull(\"Program to update was not found!\", exists ? programToUpdate : null);\r\n//        if (exists) {\r\n//            programToUpdate = programList.stream()\r\n//                    .filter(p -> p.getTitle().equals(programTitle))\r\n//                    .findFirst()\r\n//                    .orElse(null);\r\n//            assertNotNull(\"Program to update was not found in programList!\", programToUpdate);\r\n//            title = programToUpdate.getTitle();\r\n//        } else {\r\n//            title = null;\r\n//        }\r\n    }\r\n\r\n    @When(\"the instructor updates the program with the following details\")\r\n    public void theInstructorUpdatesTheProgramWithTheFollowingDetails(io.cucumber.datatable.DataTable dataTable) {\r\n        if (programToUpdate != null) {\r\n            programDetails = dataTable.asMap(String.class, String.class);\r\n            // Update the program details\r\n            programToUpdate.setDuration(programDetails.get(\"Duration\"));\r\n            programToUpdate.setDifficultyLevel(programDetails.get(\"Difficulty level\"));\r\n            programToUpdate.setGoals(programDetails.get(\"Goals\"));\r\n            programToUpdate.setContent(programDetails.get(\"Content\"));\r\n            programToUpdate.setPrice(programDetails.get(\"Price\"));\r\n        }\r\n        programService.displayAllPrograms();\r\n    }\r\n\r\n    @Then(\"the program is updated successfully with the new details\")\r\n    public void theProgramIsUpdatedSuccessfullyWithTheNewDetails() {\r\n        assertNotNull(\"Updated program should have Duration\", programToUpdate.getDuration());\r\n        assertNotNull(\"Updated program should have Difficulty Level\", programToUpdate.getDifficultyLevel());\r\n        assertNotNull(\"Updated program should have Goals\", programToUpdate.getGoals());\r\n        assertNotNull(\"Updated program should have Content\", programToUpdate.getContent());\r\n        assertNotNull(\"Updated program should have Price\", programToUpdate.getPrice());\r\n    }\r\n\r\n    @When(\"a fitness program with the title {string} doesn't exist\")\r\n    public void aFitnessProgramWithTheTitleDoesnTExist(String programTitle) {\r\n        System.out.println(\"the 3rd Scenario\\n\");\r\n        title = programTitle;\r\n        // Check that the program does not exist\r\n        boolean exists = programService.searchIfExists(programList, programTitle);\r\n        assertNull(\"Program should not exist!\", exists ? programToUpdate : null);\r\n    }\r\n\r\n    @Then(\"the system displays an error message indicating that the program does not exist\")\r\n    public void theSystemDisplaysAnErrorMessageIndicatingThatTheProgramDoesNotExist() {\r\n        assertNull(\"Program should not exist!\", programToUpdate);\r\n        System.out.println(\"The Program Title: '\" + title + \"'  Doesn't Exist :)\");\r\n    }\r\n\r\n    @When(\"the instructor attempts to delete the program with title {string}\")\r\n    public void theInstructorAttemptsToDeleteTheProgramWithTitle(String programTitle) {\r\n        programService.deleteProgram(programTitle);\r\n\r\n    }\r\n\r\n    @Then(\"the program deletion result is:\")\r\n    public void theProgramDeletionResultIs(DataTable dataTable) {\r\n        // Get expected status and message from DataTable\r\n        List<Map<String, String>> rows = dataTable.asMaps(String.class, String.class);\r\n        String expectedStatus = rows.get(0).get(\"Status\");\r\n        String expectedMessage = rows.get(0).get(\"Message\");\r\n\r\n        // Get actual status and message from programService (assuming methods exist)\r\n        String actualStatus = programService.getDeletionStatus();\r\n        String actualMessage = programService.getDeletionMessage();\r\n\r\n        // Assert expected and actual results\r\n        if (expectedStatus.equals(\"Success\")) {\r\n            // Check if program is actually deleted (optional)\r\n            Program deletedProgram = programList.stream()\r\n                    .filter(p -> p.getTitle().equals(title))\r\n                    .findFirst()\r\n                    .orElse(null);\r\n            assertNull(\"Program should be deleted successfully!\", deletedProgram);\r\n        } else {\r\n            // Program deletion failed, check for expected message\r\n        }\r\n        assertEquals(expectedStatus, actualStatus);\r\n        assertEquals(expectedMessage, actualMessage);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/example/AcceptanceTest/programManagementStepTest.java b/src/test/java/org/example/AcceptanceTest/programManagementStepTest.java
--- a/src/test/java/org/example/AcceptanceTest/programManagementStepTest.java	(revision 21a7f33596e1ccb87628045f040b10b023b15eb8)
+++ b/src/test/java/org/example/AcceptanceTest/programManagementStepTest.java	(date 1734700703701)
@@ -5,61 +5,48 @@
 import io.cucumber.java.en.Given;
 import io.cucumber.java.en.Then;
 import io.cucumber.java.en.When;
-import org.example.AdminService;
 import org.example.Main;
 import org.example.Program;
 import org.example.ProgramService;
-import org.junit.runner.RunWith;
-import org.mockito.Mockito;
-import org.mockito.junit.MockitoJUnitRunner;
-//import org.springframework.beans.factory.annotation.Autowired;
-//import org.springframework.boot.test.context.SpringBootTest;
-//import org.springframework.test.context.ContextConfiguration;
-//import org.springframework.test.context.bean.override.mockito.MockitoBean;
-//import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
+
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
 import static org.junit.Assert.*;
-//import static org.assertj.core.api.Assertions.assertThat;
-@RunWith(MockitoJUnitRunner.class) // For JUnit 4
-//@SpringJUnitConfig
-//@SpringBootTest
-//@ContextConfiguration(classes = { Program.class,ProgramService.class})
+
+
 public class programManagementStepTest {
-//    private List<Program> programList;
+    private List<Program> programList;
     private Map<String, String> programDetails;
     private String title;
     private Program programToUpdate;
     private boolean InstructorLoggedIn;
 
-    private ArrayList<Program> programList;
-//    @Autowired
+
     private ProgramService programService;
     Main app;
-//    @Before
-//    public void setup() {
-//        // Initialize the ProgramService and the program list
-//        programService = new ProgramService();
-//        programList = new ArrayList<>();
-//
-//        // Add mock data to the programService and programList
-//        List<Program> testPrograms = new ArrayList<>();
-//        testPrograms.add(new Program("Get Fit & Moving Challenge", "30 days", "Beginners", "Weight Loss, Full Body", "https://youtu.be/f3zOrYCwquE", "29.99 $"));
-//        testPrograms.forEach(program -> {
-//            programService.addProgram(program);
-//            programList.add(program);
-//        });
-//
-//        System.out.println("Mock data added to ProgramService and programList.");
-//    }
+    @Before
+    public void setup() {
+        // Initialize the ProgramService and the program list
+        programService = new ProgramService();
+        programList = new ArrayList<>();
+
+        // Add mock data to the programService and programList
+        List<Program> testPrograms = new ArrayList<>();
+        testPrograms.add(new Program("Get Fit & Moving Challenge", "30 days", "Beginners", "Weight Loss, Full Body", "https://youtu.be/f3zOrYCwquE", "29.99 $"));
+        testPrograms.forEach(program -> {
+            programService.addProgram(program);
+            programList.add(program);
+        });
+
+        System.out.println("Mock data added to ProgramService and programList.");
+    }
 
     public programManagementStepTest() {
         app = new Main();
-        this.programService = Mockito.mock(ProgramService.class);
-        programList = new ArrayList<Program>();
+
     }
 
     @Given("the instructor is logged in")
Index: src/test/java/org/example/AcceptanceTest/clientInteractionStepTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/example/AcceptanceTest/clientInteractionStepTest.java b/src/test/java/org/example/AcceptanceTest/clientInteractionStepTest.java
new file mode 100644
--- /dev/null	(date 1734700707985)
+++ b/src/test/java/org/example/AcceptanceTest/clientInteractionStepTest.java	(date 1734700707985)
@@ -0,0 +1,102 @@
+package org.example.AcceptanceTest;
+
+import io.cucumber.java.Before;
+import io.cucumber.java.BeforeAll;
+import io.cucumber.java.en.Given;
+import io.cucumber.java.en.Then;
+import io.cucumber.java.en.When;
+import org.example.Client;
+import org.example.Instruct;
+import org.example.Program;
+import org.example.ProgramService;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.verify;
+
+public class clientInteractionStepTest {
+    Program program;
+    Client client;
+    Instruct instructor;
+    String message;
+
+    @Before
+    public void setup() {
+        program = new Program("Fitness Program", "30 days", "Beginner", "Weight Loss", "Workout Plan", "19.99 $");
+        client = new Client("Alice", "alice@example.com");
+        instructor = new Instruct("John Doe", "johndoe@example.com");
+        program.enrollClient(client);
+        instructor.setProgram(program);
+
+    }
+    @Given("an instructor is logged in")
+    public void an_instructor_is_logged_in() {
+        // Write code here that turns the phrase above into concrete actions
+//        instructorLoggedIn = true;
+//        System.out.println("Instructor is logged in");
+        instructor = new Instruct("John Doe", "johndoe@example.com");
+        instructor.setLoggedIn(true);
+
+    }
+    @Given("the instructor has an active program with enrolled clients")
+    public void the_instructor_has_an_active_program_with_enrolled_clients() {
+        // Write code here that turns the phrase above into concrete actions
+        program = new Program("Fitness Program", "30 days", "Beginner", "Weight Loss", "Workout Plan", "19.99 $");
+        client = new Client("Alice", "alice@example.com");
+        System.out.println(client.getName());
+        program.enrollClient(client);
+        System.out.println(instructor.getProgramTitle());
+        instructor.setProgram(program);
+    }
+    @When("the instructor selects a client and sends a personalized message")
+    public void the_instructor_selects_a_client_and_sends_a_personalized_message() {
+        // Write code here that turns the phrase above into concrete actions
+         message = "Hi " + client.getName() + ", keep up the good work!";
+        instructor.sendMessageToClient(client, message);
+        System.out.println("Instructor sent a personalized message: " + message);    }
+    @Then("the client should receive the personalized message")
+    public void the_client_should_receive_the_personalized_message() {
+        // Write code here that turns the phrase above into concrete actions
+        assertTrue(client.hasReceivedMessage(message));
+    }
+
+//    @Given("the instructor has an active program with a discussion forum")
+//    public void the_instructor_has_an_active_program_with_a_discussion_forum() {
+//        // Write code here that turns the phrase above into concrete actions
+//        throw new io.cucumber.java.PendingException();
+//    }
+//    @When("the instructor posts a message to the forum")
+//    public void the_instructor_posts_a_message_to_the_forum() {
+//        // Write code here that turns the phrase above into concrete actions
+////        String title = "Weekly Motivation";
+////        String content = "Stay consistent, and you will see results!";
+////        instructor.postForumMessage(program, title, content);
+//    }
+//    @Then("all enrolled clients should see the message on the forum")
+//    public void all_enrolled_clients_should_see_the_message_on_the_forum() {
+//        // Write code here that turns the phrase above into concrete actions
+//        verify(program).addForumMessage(title, content);
+//
+//    }
+//
+//    @Given("the instructor has access to a client's progress report")
+//    public void the_instructor_has_access_to_a_client_s_progress_report() {
+//        // Write code here that turns the phrase above into concrete actions
+//        throw new io.cucumber.java.PendingException();
+//    }
+//    @When("the instructor provides feedback to the client")
+//    public void the_instructor_provides_feedback_to_the_client() {
+//        // Write code here that turns the phrase above into concrete actions
+//        String feedback = "Great progress this week! Try increasing your cardio sessions to 20 minutes.";
+//        instructor.provideFeedbackToClient(client, feedback);
+//    }
+//    @Then("the client should receive the feedback")
+//    public void the_client_should_receive_the_feedback() {
+//        // Write code here that turns the phrase above into concrete actions
+//        assertTrue(client.hasReceivedFeedback(feedback));
+//
+//    }
+//
+}
Index: src/main/java/org/example/Program.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\npublic class Program {\r\n    String programTitle;\r\n    String duration;\r\n    String difficultyLevel;\r\n    String goals;\r\n    String content;\r\n    String price;\r\n    public Program(String programTitle, String duration, String difficultyLevel, String goals, String content, String price) {\r\n        this.programTitle = programTitle;\r\n        this.duration = duration;\r\n        this.difficultyLevel  = difficultyLevel;\r\n        this.goals = goals;\r\n        this.content = content;\r\n        this.price = price;\r\n    }\r\n\r\n    public String getTitle() {\r\n        return programTitle;\r\n    }\r\n\r\n    public void setDuration(String duration) {\r\n        this.duration = duration;\r\n    }\r\n\r\n    public void setDifficultyLevel(String difficultyLevel) {\r\n        this.difficultyLevel = difficultyLevel;\r\n\r\n    }\r\n\r\n    public void setGoals(String goals) {\r\n        this.goals = goals;\r\n\r\n    }\r\n\r\n    public void setContent(String content) {\r\n        this.content = content;\r\n    }\r\n\r\n    public void setPrice(String price) {\r\n        this.price = price;\r\n    }\r\n\r\n    public String getDuration() {\r\n        return duration;\r\n    }\r\n\r\n    public String getDifficultyLevel() {\r\n        return difficultyLevel;\r\n    }\r\n\r\n    public String getGoals() {\r\n        return goals;\r\n    }\r\n\r\n    public String getContent() {\r\n        return content;\r\n    }\r\n\r\n    public String getPrice() {\r\n        return price;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/Program.java b/src/main/java/org/example/Program.java
--- a/src/main/java/org/example/Program.java	(revision 21a7f33596e1ccb87628045f040b10b023b15eb8)
+++ b/src/main/java/org/example/Program.java	(date 1734700703706)
@@ -1,12 +1,26 @@
 package org.example;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class Program {
+    List<Client> clientsEnrolled;
     String programTitle;
     String duration;
     String difficultyLevel;
     String goals;
     String content;
     String price;
+    public Program()
+    {
+        //new Program("Get Fit & Moving Challenge", "30 days", "Beginners", "Weight Loss, Full Body", "https://youtu.be/f3zOrYCwquE", "29.99 $")
+        programTitle = "Get Fit & Moving Challenge";
+        duration = "30 days";
+        difficultyLevel = "Beginners";
+        goals = "Weight Loss, Full Body";
+        content = "https://youtu.be/f3zOrYCwquE";
+        price = "29.99 $";
+    }
     public Program(String programTitle, String duration, String difficultyLevel, String goals, String content, String price) {
         this.programTitle = programTitle;
         this.duration = duration;
@@ -14,6 +28,7 @@
         this.goals = goals;
         this.content = content;
         this.price = price;
+        clientsEnrolled = new ArrayList<>();
     }
 
     public String getTitle() {
@@ -61,4 +76,18 @@
     public String getPrice() {
         return price;
     }
+
+    public void enrollClient(Client client) {
+        clientsEnrolled.add(client);
+        System.out.println(client.getName());
+    }
+
+    public void addForumMessage(String title, String content) {
+        System.out.println("Forum message added: " + title + ", " + content);
+    }
+    public void displayAllEnrolledClients()
+    {
+
+    }
+
 }
